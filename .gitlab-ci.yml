image: docker:19.03.0

services:
  - docker:19.03.0-dind

stages:
  - test
  - build
  - deploy-1
  - deploy-2
  - deploy-3
  - deploy-4

variables:
  # MANDATORY
  DOCKER_HOST: tcp://localhost:2375
  # MANDATORY
  DOCKER_TLS_CERTDIR: ""

# ------------------------------------------------------TESTS----------------------------------------------------------

tests:
  stage: test
  script:
    - echo "nothing to do"

# ------------------------------------------------------BUILD----------------------------------------------------------

# PROD
build-production-api:
  stage: build
  only:
    refs:
      - master
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker build -t ${DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:${CI_COMMIT_SHORT_SHA} ./server
    - docker tag ${DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:${CI_COMMIT_SHORT_SHA} ${DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:latest
    - docker push ${DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:latest

build-production-web-client:
  stage: build
  only:
    refs:
      - master
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker build -t ${DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:${CI_COMMIT_SHORT_SHA} ./web
    - docker tag ${DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:${CI_COMMIT_SHORT_SHA} ${DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:latest
    - docker push ${DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:latest


build-production-apk-builder:
  stage: build
  only:
    refs:
      - master
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker build -t ${DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:${CI_COMMIT_SHORT_SHA} ./mobile
    - docker tag ${DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:${CI_COMMIT_SHORT_SHA} ${DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:latest
    - docker push ${DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:latest

# DEV

build-development-api:
  stage: build
  only:
    refs:
      - develop
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker build -t ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:${CI_COMMIT_SHORT_SHA} ./server
    - docker tag ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:${CI_COMMIT_SHORT_SHA} ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:latest
    - docker push ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_API}:latest

build-development-web-client:
  stage: build
  only:
    refs:
      - develop
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker build -t ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:${CI_COMMIT_SHORT_SHA} ./web
    - docker tag ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:${CI_COMMIT_SHORT_SHA} ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:latest
    - docker push ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_WEB_CLIENT}:latest

build-development-apk-builder:
  stage: build
  only:
    refs:
      - develop
  script:
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD}
    - docker build -t ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:${CI_COMMIT_SHORT_SHA} ./mobile
    - docker tag ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:${CI_COMMIT_SHORT_SHA} ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:latest
    - docker push ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:${CI_COMMIT_SHORT_SHA}
    - docker push ${DEV_DOCKER_REGISTRY_IMAGE_NAME_AREA_APK_BUILDER}:latest

# ------------------------------------------------------DEPLOY---------------------------------------------------------

# PROD

deploy-production-namespace:
  stage: deploy-1
  only:
    refs:
      - master
  variables:
    DEPLOYMENT_ENV: "production"
  script:
    - apk update  && apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/.kube
    - echo -n ${KUBE_CONFIG} | base64 -d > $HOME/.kube/config
    - kubectl config view
    - cd k8s
    - sed -i "s/__ENVIRONMENT_SLUG__/${DEPLOYMENT_ENV}/" area.namespace.yaml
    - kubectl apply -f area.namespace.yaml

deploy-production-database:
  stage: deploy-2
  only:
    refs:
      - master
  variables:
    DEPLOYMENT_ENV: "production"
  script:
    - apk update  && apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/.kube
    - echo -n ${KUBE_CONFIG} | base64 -d > $HOME/.kube/config
    - kubectl config view
    - cd k8s/db
    - sed -i "s/__ENVIRONMENT_SLUG__/${DEPLOYMENT_ENV}/" area.db.configmap.yaml area.db.volume.yaml area.db.deployment.yaml area.db.service.yaml
    - kubectl apply -f area.db.configmap.yaml
    - kubectl apply -f area.db.volume.yaml
    - kubectl apply -f area.db.deployment.yaml
    - kubectl apply -f area.db.service.yaml

# DEV

deploy-development-namespace:
  stage: deploy-1
  only:
    refs:
      - develop
  variables:
    DEPLOYMENT_ENV: "development"
  script:
    - apk update  && apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/.kube
    - echo -n ${KUBE_CONFIG} | base64 -d > $HOME/.kube/config
    - kubectl config view
    - cd k8s
    - sed -i "s/__ENVIRONMENT_SLUG__/${DEPLOYMENT_ENV}/" area.namespace.yaml
    - kubectl apply -f area.namespace.yaml

deploy-development-database:
  stage: deploy-2
  only:
    refs:
      - master
  variables:
    DEPLOYMENT_ENV: "development"
  script:
    - apk update  && apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/.kube
    - echo -n ${KUBE_CONFIG} | base64 -d > $HOME/.kube/config
    - kubectl config view
    - cd k8s/db
    - sed -i "s/__ENVIRONMENT_SLUG__/${DEPLOYMENT_ENV}/" area.db.configmap.yaml area.db.volume.yaml area.db.deployment.yaml area.db.service.yaml
    - kubectl apply -f area.db.configmap.yaml
    - kubectl apply -f area.db.volume.yaml
    - kubectl apply -f area.db.deployment.yaml
    - kubectl apply -f area.db.service.yaml
